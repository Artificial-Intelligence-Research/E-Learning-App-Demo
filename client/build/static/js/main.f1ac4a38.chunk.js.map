{"version":3,"sources":["utils/sessions.js","actions.js","constants.js","Components/LoginModal.js","Components/InstructorSignupModal.js","Components/WelcomeToastWidget.js","Components/Homepage.js","pages/Home.js","Components/AppNavbar.js","pages/PortalLanding.js","Components/AddStudentModal.js","Components/StudentRosterTable.js","pages/InsStudentRoster.js","Components/StudentCard.js","pages/InsCourseRoster.js","Components/CourseCard.js","Components/AddCourseModal.js","pages/InsCoursePage.js","pages/ResetPassword.js","pages/AdminLandingPage.js","Components/AdminInstructorTable.js","pages/AdminInstructorView.js","Components/AdminStudentTable.js","pages/AdminStudentView.js","Components/StuCourseCard.js","pages/StuCoursePage.js","Components/Player.js","Components/LessonCard.js","pages/StuLessonPage.js","Components/ProtectedRoute.js","Components/Unauthorized.js","pages/InsLessonPage.js","App.js","serviceWorker.js","reducer.js","store.js","index.js","img/403.png"],"names":["config","require","validateSession","localStorage","getItem","__session","JSON","parse","Date","now","ts","REACT_APP_SESSION_LENGTH","loginAttempt","creds","dispatch","getState","type","isFetchingAuth","isAuthenticatedUser","axios","post","then","response","status","authObj","removeItem","setItem","stringify","createSession","data","payload","catch","error","loginFailed","message","getCourseSuccess","courses","getCourseFailure","getLessonsSuccess","lessons","getLessonsFailure","setCourseId","id","setCourseIdSuccess","logoutAttempt","console","log","LoginModal","props","useDispatch","useState","validated","setValidated","email","password","loginCreds","setLoginCreds","useSelector","gState","handleInputChange","e","currState","target","name","value","Modal","className","size","aria-labelledby","centered","Header","closeButton","Title","Body","Form","noValidate","onSubmit","preventDefault","stopPropagation","currentTarget","checkValidity","Alert","variant","Group","Label","htmlFor","Control","placeholder","loginEmail","onChange","required","Feedback","aria-describedby","loginPassword","Button","onClick","onHide","InstructorSignupModal","controlId","Text","muted","WelcomeToastWidget","isLoggedOutSuccess","aria-live","aria-atomic","style","position","minHeight","minWidth","top","right","Toast","backgroundColor","tag","fname","Homepage","loginModalShow","setLoginModalShow","signupModalShow","setSignupModalShow","history","useHistory","useEffect","redirectRouter","routePath","push","performUserLogout","Jumbotron","renderLoginLogoutBtn","role","toUpperCase","renderInstSignupOrDash","show","Home","AppNavbar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","NavDropdown","title","Item","InsLanding","Fragment","AddStudentModal","first_name","last_name","crsid","studentData","setStudentData","as","accessToken","isAddingNewUser","headers","addStudentFailed","StudentRosterTable","stuRoster","Table","map","student","Users","user","key","course_name","InsStudentRoster","showStudentModal","setShowStudentModal","isNewUserAdded","token","get","roster","getRosterFailure","StudentCard","Card","width","Image","src","roundedCircle","firstName","lastName","InsCourseRoster","courseName","CourseCard","course","Img","subject","path","course_Id","viewLessons","AddCourseModal","user_id","courseData","setCourseData","isAddingCourseUser","addCourseFailed","InsCoursePage","isNewCourseAdded","showCourseModal","setShowCourseModal","ResetPassword","isValidPassResTok","isValidatingPassResTok","resPassUid","tempToken","_token","queryToken","undefined","parseToken","location","search","userId","resetPassTokenFailed","AdminLandingPage","AdminInstructorTable","allInstructors","instructor","AdminInstructorList","getAllInstructorsFailure","AdminStudentTable","allStudents","AdminStudentList","getAllStudentsFailure","StuCourseCard","Users_Courses","courseId","stuResponse","Courses","Player","url","height","controls","LessonCard","lesson","getAttribute","getUrlSuccess","getUrl","urlGetter","StuLessonPage","ProtectedRoute","Component","component","auth","rest","render","Object","keys","length","to","pathname","state","from","Unauthorized","logo403","alt","InsLessonPage","App","isSessionValid","exact","StuCoursePage","PortalLanding","InsCourses","AdminInstructorView","AdminStudentView","Boolean","window","hostname","match","initialState","isLoggingOut","courseObj","stuObj","store","createStore","action","compose","applyMiddleware","thunk","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f1ac4a38.chunk.js","sourcesContent":["//helper functions for local storage operations\n//with login sessions.\n//---------------------------------------------\n//importing config file\nconst config = require(\"../config/config-react.json\");\n\n//creating session after successful login\nexport const createSession = (authObj) => {\n    //check if __session exist\n    //const __session = localStorage.getItem(\"__session\") || \"\";\n    if(localStorage.getItem(\"__session\")) {localStorage.removeItem(\"__session\")};\n    //create timestamp for session info\n    const ts = ~~(Date.now() / 1000);\n    //add timestamp into authObject\n    authObj[\"ts\"] = authObj[\"ts\"] || ts;\n    //send authObj to localStorage\n    localStorage.setItem(\"__session\", JSON.stringify(authObj));\n}\n\n//destroy __session from localStorage on logout\nexport const destroySession = () => {\n    //remove __session from localStorage\n    localStorage.removeItem(\"__session\");\n    console.log(\"__session eliminated\");\n}\n\n//validating session if exist\nexport const validateSession = () => {\n    //check if __session exist\n    //if exists, validate timestamp.\n    if(localStorage.getItem(\"__session\")){\n        const __session = JSON.parse(localStorage.getItem(\"__session\"));\n        //calculate difference in Hrs\n        const tsDiffHrs = ((~~(Date.now() / 1000)) - __session.ts) / 3600;\n        if(tsDiffHrs >= config.REACT_APP_SESSION_LENGTH) return false;\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n//returning session object if session is valid\nexport const getSessionAuthObj = () => {\n    if (validateSession()){\n        //return session\n        return JSON.parse(localStorage.getItem(\"__session\"));\n    }\n    return {}\n}","//importing constants\nimport { \n  LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, \n  LOGOUT_REQUEST, LOGOUT_SUCCESS,LOGOUT_FAILURE,\n  ADD_STUDENT_REQUEST, ADD_STUDENT_SUCCESS, ADD_STUDENT_FAILURE,\n  ADD_COURSE_REQUEST, ADD_COURSE_SUCCESS, ADD_COURSE_FAILURE,\n  GET_COURSES_REQUEST, GET_COURSES_SUCCESS, GET_COURSES_FAILURE,\n  GET_LESSONS_REQUEST, GET_LESSONS_SUCCESS, GET_LESSONS_FAILURE,\n  SET_COURSE_IDREQ , SET_COURSE_IDSUCCESS , SET_COURSE_IDFAIL,\n  GET_ALL_INSTRUCTORS_REQUEST, GET_ALL_INSTRUCTORS_SUCCESS, GET_ALL_INSTRUCTORS_FAILURE,\n  GET_ALL_STUDENTS_REQUEST, GET_ALL_STUDENTS_SUCCESS, GET_ALL_STUDENTS_FAILURE,\n  GET_ROSTER_REQUEST, GET_ROSTER_SUCCESS, GET_ROSTER_FAILURE,\n  PASSRESTOK_VALIDATION_REQUEST, PASSRESTOK_VALIDATION_SUCCESS, PASSRESTOK_VALIDATION_FAILURE,\n  GET_URL_REQUEST, GET_URL_SUCCESS, GET_URL_FAILURE\n} from \"./constants\";\nimport { createSession, destroySession, validateSession } from \"./utils/sessions\";\nimport axios from \"axios\";\n\n//action: LOGIN_SUCCESS once backend call is successfull\nconst loginSuccess = (authObj) => ({\n  type:    LOGIN_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: authObj,\n});\n\n//action: LOGIN_FAILURE if backend call is unsuccessful\nconst loginFailed = (error) => ({\n  type:    LOGIN_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: LOGIN_REQUEST  to backend REST api\nexport const loginAttempt = (creds) => {\n  //function receives credentials\n  return (dispatch, getState) => {\n    //dispatch action to notify client\n    //of login request in progress\n    dispatch({\n        type: LOGIN_REQUEST,\n        isFetchingAuth: true,\n        isAuthenticatedUser: false\n      });\n    //use axios to query REST api for login.\n    axios\n      .post(\"/api/auth/signin\", creds)\n      .then( (response) => {\n        //if request is successful, persist a session and dispatch\n        //login success action\n        if(response.status === 200){\n          createSession(response.data);\n          dispatch(loginSuccess(response.data));\n        }\n      })\n      .catch( (error) => {\n        dispatch(loginFailed(error.message));\n      });\n  }\n}\n\n///Action to load courses\nconst getCourseSuccess = (courses) => ({\n  type: GET_COURSES_SUCCESS,\n  payload: courses\n})\n//When Request from API fails\nconst getCourseFailure = (error) => ({\n  type: GET_COURSES_FAILURE,\n  payload: error,\n})\n\n\n//courses Api request for instructor\nexport const getCourses = (token) => {\n \n  return (dispatch, getState) => {\n    dispatch({type: GET_COURSES_REQUEST});\n    axios\n      .get(\"/api/user/instructor/courses\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getCourseSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getCourseFailure(error.message))\n      })\n  }\n}\n\n\n//Get Courses Student API request\nexport const getStuCourses = (token) => {\n  return (dispatch, getState) => {\n    dispatch({type: GET_COURSES_REQUEST});\n    axios\n      .get(\"/api/user/student/courses\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        console.log(response)\n        let stuResponse = response.data.data.Courses\n        dispatch(getCourseSuccess(stuResponse))\n        console.log(response)\n\n      })\n      .catch((error) => {\n        dispatch(getCourseFailure(error.message))\n      })\n  }\n}\n\n\n//Actions to get lessons for the instructors page\n///Action to load courses\nconst getLessonsSuccess = (lessons) => ({\n  type: GET_LESSONS_SUCCESS,\n  payload: lessons\n})\n//When Request from API fails\nconst getLessonsFailure = (error) => ({\n  type: GET_LESSONS_FAILURE,\n  payload: error,\n})\n\n\n//courses Api request for instructor\nexport const getLessons = (token, id) => {\n  return (dispatch, getState) => {\n    dispatch({type: GET_LESSONS_REQUEST});\n    axios\n      .get(\"/api/user/instructor/lessons/\" + id , {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        \n        dispatch(getLessonsSuccess(response.data))\n        \n      })\n      .catch((error) => {\n        dispatch(getLessonsFailure(error.message))\n      })\n  }\n}\n\n//Get Lessons for students pages\nexport const getStuLessons = (token, id) => {\n  return (dispatch, getState) => {\n    dispatch({type: GET_LESSONS_REQUEST});\n    axios\n      .get(\"/api/user/student/courses/\" + id +\"/lessons\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        console.log(response)\n        dispatch(getLessonsSuccess(response.data))\n        \n      })\n      .catch((error) => {\n        dispatch(getLessonsFailure(error.message))\n      })\n  }\n}\n\n\nconst setCourseIdSuccess = (id) => {\n \nreturn {\n  type: SET_COURSE_IDSUCCESS,\n  payload: id\n}\n}\n\n//When Request from API fails\nconst setCourseIdFailure = (error) => ({\n  type: SET_COURSE_IDFAIL,\n  payload: error,\n})\n\nexport const setCourseId = (id) => {\n  return (dispatch, getState) => {\n    if(id){\n      dispatch(setCourseIdSuccess(id))\n\n    } else {\n      dispatch(setCourseIdFailure())\n    }\n\n  }\n}\n\n\n//Action to get Students Roster\nconst getRosterSuccess = (stuRoster) => (\n  {\n    type: GET_ROSTER_SUCCESS,\n    payload: stuRoster\n  }\n)\nconst getRosterFailure = (error) => ({\n  type: GET_ROSTER_FAILURE,\n  payload: error\n})\n\nexport const getStuRoster = (token) => {\n  return (dispatch, getState) => {\n    dispatch({type: GET_ROSTER_REQUEST})\n    axios\n    .get(\"/api/user/instructor/courses\", {\n      headers: {\n        'x-access-token': token\n      }\n    })\n    .then((response) => {\n      let roster = response.data.data\n      console.log(response.data)\n      dispatch(getRosterSuccess(roster))\n\n      \n    })\n    .catch((error) => {\n      dispatch(getRosterFailure(error.message))\n    })\n  }\n}\n\n///Action to get all instructors\nconst getAllInstructorsSuccess = (allInstructors) => ({\n  type: GET_ALL_INSTRUCTORS_SUCCESS,\n  payload: allInstructors\n})\n//When Request from API fails\nconst getAllInstructorsFailure = (error) => ({\n  type: GET_ALL_INSTRUCTORS_FAILURE,\n  payload: error,\n})\n\n//view instructor Api request for admin\nexport const getAllInstructors = (token) => {\n \n  return (dispatch, getState) => {\n    dispatch({type: GET_ALL_INSTRUCTORS_REQUEST});\n    axios\n      .get(\"/api/user/admin/view/instructors\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getAllInstructorsSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getAllInstructorsFailure(error.message))\n      })\n  }\n}\n\n///Action to get all student\nconst getAllStudentsSuccess = (allStudents) => ({\n  type: GET_ALL_STUDENTS_SUCCESS,\n  payload: allStudents\n})\n//When Request from API fails\nconst getAllStudentsFailure = (error) => ({\n  type: GET_ALL_STUDENTS_FAILURE,\n  payload: error,\n})\n\n\n//view students Api request for admin\nexport const getAllStudents = (token) => {\n \n  return (dispatch, getState) => {\n    dispatch({type: GET_ALL_STUDENTS_REQUEST});\n    axios\n      .get(\"/api/user/admin/view/students\", {\n        headers: {\n          'x-access-token': token\n        }\n      })\n      .then((response) => {\n        dispatch(getAllStudentsSuccess(response.data))\n     \n      })\n      .catch((error) => {\n        dispatch(getAllStudentsFailure(error.message))\n      })\n  }\n}\n\nconst logoutSuccess = () => ({\n  type:    LOGOUT_SUCCESS,\n  isAuthenticatedUser: false,\n});\n\nconst logoutFail = (error) => ({\n  type:    LOGOUT_FAILURE,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: LOGOUT_REQUEST\nexport const logoutAttempt = () => {\n  //dispatch logout request\n  return (dispatch, getState) => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    //call helper function to remove session from localStorage\n    destroySession();\n    //validate session to check if it was properly deleted\n    if(!validateSession()){\n      dispatch(logoutSuccess());\n    }\n    else{\n      //__session was not removed\n      dispatch(logoutFail(\"Error deleting existing session.\"))\n    }\n  }\n}\n\n//action: Add_STUDENT_FAILURE if backend call is unsuccessful\nconst addStudentFailed = (error) => ({\n  type:    ADD_STUDENT_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: ADD_STUDENT_SUCCESS once backend call is successfull\nconst addStudentSuccess = (stuObj) => ({\n  type:    ADD_STUDENT_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: stuObj,\n});\n\n//action: ADD_STUDENT_REQUEST to REST API\nexport const addStudentAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch, getState) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: ADD_STUDENT_REQUEST, \n          isAddingNewUser: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/auth/signup\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(addStudentSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(addStudentFailed(error.message));\n        });\n      }\n  }\n//action: Add_COURSE_FAILURE if backend call is unsuccessful\nconst addCourseFailed = (error) => ({\n  type:    ADD_COURSE_FAILURE,\n  isFetchingAuth: false,\n  isAuthenticatedUser: false,\n  payload: error,\n});\n\n//action: ADD_COURSE_SUCCESS once backend call is successfull\nconst addCourseSuccess = (courseObj) => ({\n  type:    ADD_COURSE_SUCCESS,\n  isFetchingAuth: false,\n  isAuthenticatedUser: true,\n  payload: courseObj,\n});\n\n//action: ADD_COURSE_REQUEST to REST API\nexport const addCourseAttempt = (data, accessToken) => {\n    //function receives credentials\n    return (dispatch, getState) => {\n      //dispatch action to notify client \n      //of add student request in progress\n      dispatch({ \n          type: ADD_COURSE_REQUEST, \n          isAddingCourseUser: true, \n          isAuthenticatedUser: true \n        });\n      //use axios to query REST api for add student.\n      axios\n        .post(\"/api/user/instructor/courses\", data, {\n          headers: {\n            \"x-access-token\": accessToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(addCourseSuccess(response.data));\n          }\n        })\n        .catch( (error) => {\n          dispatch(addCourseFailed(error.message));\n        });\n      }\n  }\n  \n\n//Password reset transactions\nconst resetPassTokenSuccess = (userId) => ({\n  type:    PASSRESTOK_VALIDATION_SUCCESS,\n  isValidatingPassResTok: false,\n  isValidPassResTok: true,\n  payload: userId,\n});\n\nconst resetPassTokenFailed = (error) => ({\n  type:    PASSRESTOK_VALIDATION_FAILURE,\n  isValidatingPassResTok: false,\n  isValidPassResTok: false,\n  payload: error,\n});\n\nexport const validateResetPassToken = (tempToken) => {\n    //function receives credentials\n    return (dispatch, getState) => {\n      dispatch({\n        type:    PASSRESTOK_VALIDATION_REQUEST,\n        isValidatingPassResTok: true,\n        isValidPassResTok: false\n      })\n      //use axios to query REST api for add student.\n      axios\n        .get(\"/api/auth/token\", {\n          headers: {\n            \"x-access-token\": tempToken\n          }\n        })\n        .then( (response) => {\n          //if request is successful, persist a session and dispatch\n          //login success action\n          if(response.status === 200){\n            dispatch(resetPassTokenSuccess(response.data.userId));\n            console.log(\"token validated\", response.data.userId);\n          }\n        })\n        .catch( (error) => {\n          console.log(\"error validating token\");\n          dispatch(resetPassTokenFailed(error.message));\n        });\n      }\n  }\n\n  const getUrlSuccess = (url) => {\n \n    return {\n      type: GET_URL_SUCCESS,\n      payload: url\n    }\n  }\n\n  const getUrlfailure = (error) => {\n \n    return {\n      type: GET_URL_FAILURE,\n      payload: error\n    }\n  }\n\n  export const getUrl = (url) => {\n    return(dispatch, getState) => {\n      if(url){\n        dispatch(getUrlSuccess(url))\n      }else {\n        dispatch(getUrlfailure())\n      }\n    }\n  }\n\n\n\n\n\n","//defining LOGIN actions\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\n\n//defining LOGOUT actions\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\n//defining Add Course Actions\nexport const ADD_COURSE_REQUEST = 'ADD_COURSE_REQUEST';\nexport const ADD_COURSE_SUCCESS = 'ADD_COURSE_SUCCESS';\nexport const ADD_COURSE_FAILURE = 'ADD_COURSE_FAILURE';\n\n//defining get Courses Actions\nexport const GET_COURSES_REQUEST = 'GET_COURSES_REQUEST';\nexport const GET_COURSES_SUCCESS = 'GET_COURSES_SUCCESS';\nexport const GET_COURSES_FAILURE = 'GET_COURSES_FAILURE';\n\n// defining Add Students Actions\nexport const ADD_STUDENT_REQUEST = 'ADD_STUDENT_REQUEST';\nexport const ADD_STUDENT_SUCCESS = 'ADD_STUDENT_SUCCESS';\nexport const ADD_STUDENT_FAILURE = 'ADD_STUDENT_FAILURE';\n\n//Defining Action to pass course id from courseCard to global state\nexport const SET_COURSE_IDSUCCESS = 'SET_COURSE_IDSUCCESS';\nexport const SET_COURSE_IDFAIL = 'SET_COURSE_IDFAIL';\nexport const SET_COURSE_IDREQ = 'SET_COURSE_IDREQ'\n\n//defining get lessons Actions\nexport const GET_LESSONS_REQUEST = 'GET_LESSONS_REQUEST';\nexport const GET_LESSONS_SUCCESS = 'GET_LESSONS_SUCCESS';\nexport const GET_LESSONS_FAILURE = 'GET_LESSONS_FAILURE';\n\n//defining get  instructors Actions for admin\nexport const GET_ALL_INSTRUCTORS_REQUEST = 'GET_ALL_INSTRUCTORS_REQUEST';\nexport const GET_ALL_INSTRUCTORS_SUCCESS = 'GET_ALL_INSTRUCTORS_SUCCESS';\nexport const GET_ALL_INSTRUCTORS_FAILURE = 'GET_ALL_INSTRUCTORS_FAILURE';\n\n//defining get students Actions for admin\nexport const GET_ALL_STUDENTS_REQUEST = 'GET_ALL_STUDENTS_REQUEST';\nexport const GET_ALL_STUDENTS_SUCCESS = 'GET_ALL_STUDENTS_SUCCESS';\nexport const GET_ALL_STUDENTS_FAILURE = 'GET_ALL_STUDENTS_FAILURE';\n\n//defining roster actions\nexport const GET_ROSTER_REQUEST = 'GET_ROSTER_REQUEST';\nexport const GET_ROSTER_SUCCESS = 'GET_ROSTER_SUCCESS';\nexport const GET_ROSTER_FAILURE = 'GET_ROSTER_FAILURE';\n\n//defining reset password constants\nexport const PASSRESTOK_VALIDATION_REQUEST = 'PASSRESTOK_VALIDATION_REQUEST';\nexport const PASSRESTOK_VALIDATION_SUCCESS = 'PASSRESTOK_VALIDATION_SUCCESS';\nexport const PASSRESTOK_VALIDATION_FAILURE = 'PASSRESTOK_VALIDATION_FAILURE';\n//getting URL for video player\nexport const GET_URL_REQUEST = 'GET_URL_REQUEST';\nexport const GET_URL_SUCCESS = 'GET_URL_SUCCESS';\nexport const GET_URL_FAILURE = 'GET_URL_FAILURE';\n\n","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import login attempt action\nimport { loginAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction LoginModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [loginCreds, setLoginCreds] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  //importing global state\n  const [isAuthenticatedUser, isFetchingAuth, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.isFetchingAuth,\n    gState.error,\n  ]);\n\n  //Conditional Rendering\n  //----------------------\n  const renderLoginStatus = () => {\n    if(isFetchingAuth) {return <Alert variant=\"info\">Validating...</Alert>}\n    if(isAuthenticatedUser) {return <Alert variant=\"success\">Authenticated!</Alert>}\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n  }\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...loginCreds};\n    //retrieve values form input changed\n    const {name, value} = e.target;\n    //update current State backup\n    currState[name] = value;\n    //set state\n    setLoginCreds(currState);\n  }\n\n  //handleSubmit function to send credentials\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false){\n      //dispatch loginAttempt action and pass loginCreds\n      dispatch(loginAttempt(loginCreds));\n    }\n    setValidated(true);\n  }\n\n    return (\n      <Modal\n        {...props} className=\"login-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Login\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated} onSubmit={ handleSubmit } >\n                {renderLoginStatus()}\n                <Form.Group id=\"formBasicEmail\">\n                    <Form.Label htmlFor=\"login-email\">Email address</Form.Label>\n                    <Form.Control \n                        name=\"email\"\n                        id=\"login-email\" \n                        type=\"email\" \n                        placeholder=\"Enter email\" \n                        value={loginCreds.loginEmail}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please verify email is entered correctly.\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group id=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"login-password\">Password</Form.Label>\n                    <Form.Control\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"login-password\"\n                        aria-describedby=\"passwordHelpBlock\" placeholder=\"Password\"\n                        value={loginCreds.loginPassword}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter password\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Button className=\"primary-button\" type=\"submit\">Login</Button>\n                <Button className=\"homepage-buttons\"onClick={props.onHide} variant=\"secondary\">Forgot Password</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default LoginModal;","import React from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport \"../App.css\";\n\nfunction InstructorSignupModal(props) {\n    return (\n      <Modal\n        {...props} className=\"signup-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Sign-up\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form>\n                <Form.Group controlId=\"signup-first-name\">\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control controlId=\"signup-first-name\" type=\"text\" placeholder=\"First name\" />\n                </Form.Group>\n                <Form.Group controlId=\"signup-first-name\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control controlId=\"signup-first-name\" type=\"text\" placeholder=\"Last name\" />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control controlId=\"userID-Login\" type=\"email\" placeholder=\"Enter email\" />\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\" \n                        placeholder=\"Password\"\n                    />\n                    <Form.Text id=\"passwordHelpBlock\" muted>\n                        Your password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Re-enter Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\"\n                        placeholder=\"Password\"\n                    />\n                </Form.Group>\n                <Button className=\"primary-button\" onClick={props.onHide}>Create Account</Button>\n            </Form>\n        </Modal.Body>   \n        {/* <Modal.Footer>\n          <Button onClick={props.onHide}>Login</Button>\n        </Modal.Footer> */}\n      </Modal>\n    );\n  }\n\n  export default InstructorSignupModal;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Toast } from 'react-bootstrap';\n// import { useHistory } from \"react-router-dom\";\nimport \"../App.css\";\n\nfunction WelcomeToastWidget (props) {\n    //importing global state\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n\n    return (\n        < >\n            <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{\n                    position: 'absolute',\n                    minHeight: '100px',\n                    minWidth: '250px',\n                    top: 0,\n                    right: 0\n                }}\n                >\n                    <Toast\n                        style={{\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        backgroundColor: '#2ba6cb'\n                        }} \n                        tag=\"div\"\n                    >\n                        <Toast.Body tag=\"div\">\n                            <strong tag=\"div\" className=\"mr-auto\">Welcome, {authObj.fname}!</strong>\n                        </Toast.Body>\n                    </Toast>\n            </div>\n        </>\n    ) \n};\n\nexport default WelcomeToastWidget;","import React, {useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport LoginModal from './LoginModal';\nimport InstructorSignupModal from './InstructorSignupModal';\nimport WelcomeToastWidget from './WelcomeToastWidget';\nimport { Jumbotron, Button } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport { logoutAttempt } from \"../actions\";\nimport \"../App.css\";\n\nfunction Homepage(props) {\n    const dispatch = useDispatch();\n    const [loginModalShow, setLoginModalShow] = useState(false);\n    const [signupModalShow, setSignupModalShow] = useState(false);\n    //importing global state\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n\n    //using useEffect to track isAuthenticatedUser changes\n    //and hide login modal after successfull signin\n    useEffect(() => {\n        if (isAuthenticatedUser){\n            setLoginModalShow(false);\n        }\n        if(!isAuthenticatedUser && isLoggedOutSuccess){\n            redirectRouter(\"/\");\n        }\n    }, [isAuthenticatedUser, isLoggedOutSuccess]);\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    //function to render login or logout btn\n    const renderLoginLogoutBtn = () => {\n        if (!isAuthenticatedUser){\n            return (\n                <Button className=\"homepage-buttons primary-button\" variant=\"primary\" onClick={() => \n                    setLoginModalShow(true)}>Login</Button>\n            );\n        }\n        // else {\n        //     //user authenticated. no need to show login\n        //     return (\n        //         <Button className=\"homepage-buttons primary-button\" variant=\"primary\">Welcome, {authObj.fname}</Button>\n        //     )\n        // }\n    }\n\n    //function to render instructor signup or take\n    //to dashboard button\n    const renderInstSignupOrDash = () => {\n        if (!isAuthenticatedUser) {\n            return (\n                <Button className=\"homepage-buttons\" variant=\"secondary\" onClick={() => setSignupModalShow(true)}>Become an Instructor</Button>\n            )\n        }\n        else {\n            let routePath = \"\";\n            switch (authObj.role.toUpperCase()) {\n                case \"INSTRUCTOR\":\n                    routePath = \"/instructor\";\n                    break;\n                case \"ADMIN\":\n                    routePath = \"/admin\"\n                    break\n                case \"STUDENT\":\n                    routePath = \"/student\";\n                    break;\n\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n           \n            return (\n                < >\n                    <Button className=\"homepage-buttons primary-button\" variant=\"primary\" onClick={() => redirectRouter(routePath)}>My Dashboard</Button>\n                    <Button className=\"homepage-buttons\" variant=\"secondary\" onClick={() => performUserLogout()}>Logout</Button>\n                    <WelcomeToastWidget />\n                </>\n            )\n        }\n    }\n\n    const performUserLogout = () => {\n        if(isAuthenticatedUser){\n            //dispatch logout action\n            dispatch(logoutAttempt())\n        }\n    };\n\n    return (\n        < >\n            <Jumbotron className=\"homepage-background\" tag=\"div\">\n                <div className=\"homepage-content\">\n                    <h1 tag=\"div\" className=\"\">POD | E-Learning</h1>\n                    <p tag=\"div\">\n                        Revolutionizing distance learning for small format learning groups of all ages.\n                    </p>\n                    <p tag=\"div\">\n                        { renderLoginLogoutBtn() }\n                        { renderInstSignupOrDash() }\n                        <LoginModal show={loginModalShow} onHide={() => setLoginModalShow(false)} />\n                        <InstructorSignupModal show={signupModalShow} onHide={() => setSignupModalShow(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n        </>\n    )\n}\n\nexport default Homepage;","import React from \"react\";\nimport Homepage from '../Components/Homepage'\n// import { link } from \"react-router-dom\";\n\n//Home React Component -- Home Page\nfunction Home(props) {\n  return (\n    <Homepage />\n  );\n}\n\nexport default Home;\n","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {Navbar, NavDropdown} from \"react-bootstrap\";\nimport { logoutAttempt } from \"../actions\";\nimport \"../App.css\";\n\n\nexport default function AppNavbar() {\n    const dispatch = useDispatch();\n\n    const [isAuthenticatedUser, isLoggedOutSuccess, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.isLoggedOutSuccess,\n        gState.authObj,\n    ]);\n\n    const history = useHistory();\n    \n    useEffect(() => {\n        if(!isAuthenticatedUser && isLoggedOutSuccess){\n            redirectRouter(\"/\");\n        }\n    }, [isLoggedOutSuccess]);\n    \n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    const performUserLogout = () => {\n        if(isAuthenticatedUser){\n        //dispatch logout action\n            dispatch(logoutAttempt())\n        }\n    };  \n   \n    return (\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">POD | E-Learning</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\">\n                <Navbar.Text>Signed in as:</Navbar.Text>\n                <NavDropdown title={authObj.fname} id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item href=\"/\" onClick={() => performUserLogout()}>Logout</NavDropdown.Item>\n                    {/* <NavDropdown.Item href=\"#action/3.2\">My Profile</NavDropdown.Item> */}\n                </NavDropdown>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { useSelector } from \"react-redux\";\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../instructor.css\";\n\nexport default function InsLanding() {\n    const [stuList, setStudent] = useState();\n    const [coursesList, setCourses] = useState(false);\n\n    const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.authObj,\n    ]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            {authObj.role === \"INSTRUCTOR\" ?(\n                <Jumbotron tag=\"div\" className=\"InsLanding-background homepage-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 tag=\"div\" className=\"\">POD | Instructor Portal</h1>\n                    <p tag=\"div\">\n                        Manage Students, Courses, and Content all in one place!\n                    </p>\n                    <p tag=\"div\" className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\" onClick={() => redirectRouter(\"/instructor/student-roster\")}>MANAGE STUDENTS</Button>\n                        <Button className=\"InsBtn AddCourses primary-button\" onClick={() => redirectRouter(\"/instructor/courses\")}>MANAGE COURSES</Button>\n                        {/* <Button className=\"InsBtn Dashboard primary-button\" onClick={handleInstructorRoutes}>MANAGE CONTENT</Button> */}\n                    </p>\n                </div>\n            </Jumbotron>\n\n            ) :(\n                <Jumbotron tag=\"div\" className=\"InsLanding-background homepage-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                <h1 className=\"\">POD | Student Portal</h1>\n                <p tag=\"div\">\n                    All your Courses in one place!\n                </p>\n                <p tag=\"div\" className=\"btngroup\">\n                    <Button className=\"MyCourses\" onClick={() => redirectRouter(\"/student/courses\")}>My Courses</Button>\n                    {/* <Button className=\"InsBtn AddCourses primary-button\" onClick={redirectRouter}>MANAGE COURSES</Button> */}\n                    {/* <Button className=\"InsBtn Dashboard primary-button\" onClick={handleInstructorRoutes}>MANAGE CONTENT</Button> */}\n                </p>\n            </div>\n        </Jumbotron>\n            )}\n            \n        </React.Fragment>\n        \n    )\n}\n","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import addStudentAttempt action\nimport { addStudentAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddStudentModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [studentData, setStudentData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    role: \"STUDENT\",\n    crsid: \"1\",\n    password: \"\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n   \n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...studentData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setStudentData(currState);\n    // console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      //dispatch addStudentAttempt action and pass studentData\n      dispatch(addStudentAttempt(studentData, authObj.accessToken));\n      return <Alert variant=\"success\">Student Added!</Alert>\n    } \n    setValidated(true);\n  \n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n      \n  }\n\n    return (\n      <Modal\n        {...props} className=\"signup-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Sign-up\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"signup-first-name\" >\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control id=\"signup-first-name\" type=\"text\" placeholder=\"First name\" \n                        name=\"first_name\"\n                        value={studentData.first_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"signup-last-name\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control id=\"signup-last-name\" type=\"text\" placeholder=\"Last name\" \n                        name=\"last_name\"\n                        value={studentData.last_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control id=\"userID-Login\" type=\"email\" placeholder=\"Enter email\"\n                      name=\"email\"\n                      value={studentData.email}\n                      onChange={handleInputChange}\n                      required/>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"exampleForm.ControlSelect1\">\n                  <Form.Label>Select Course</Form.Label>\n                    <Form.Control as=\"select\" \n                    name=\"crsid\"\n                    value={studentData.crsid} \n                    onChange={handleInputChange} \n                    required>\n                      <option value=\"1\">Test Course One</option>\n                      <option value=\"2\">Test Course Two</option>\n                      <option value=\"3\">Test Course Three</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword5\"\n                        aria-describedby=\"passwordHelpBlock\" \n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Text className=\"passwordHelpBlock\" muted>\n                        Password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"formBasicPassword\">\n                    <Form.Label htmlFor=\"inputPassword5\">Re-enter Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        id=\"inputPassword\"\n                        aria-describedby=\"passwordHelpBlock\"\n                        placeholder=\"Re-enter Password\"\n                        name=\"password\"\n                        value={studentData.password} \n                        onChange={handleInputChange} \n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter valid password\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Button className=\"primary-button add-student\"  onClick={ handleSubmit } >Add Student</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default AddStudentModal;","import React, {useState} from 'react'\nimport { Table } from \"react-bootstrap\"\nimport \"../instructor.css\";\n\nexport default function StudentRosterTable( props ) {\n    const { stuRoster } = props;\n    \nconst renderRows = () => {\n    return stuRoster.map((student, id) =>{\n        return(\n            <>\n                {student.Users.map(user =>\n                <tr key={id}>\n                <td>{student.course_name}</td>\n                <td>{user.first_name}</td>\n                <td>{user.last_name}</td>\n                <td>{user.email}</td>\n                </tr>\n                )}\n            </>\n        )\n    })\n}\n\n    return (\n\n\n        <Table className=\"table-expand\">\n            <thead>\n                <tr className=\"table-expand-row\">\n                    <th >Course Name</th>\n                    <th >First Name</th>\n                    <th >Last Name</th>\n                    <th >Email Address</th>\n                    <th ></th>\n                </tr>\n            </thead>\n            <tbody id=\"emptyTable\">\n               {renderRows()}\n            </tbody>\n        </Table>\n    )\n}","import React, {useState, useEffect} from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport AddStudentModal from '../Components/AddStudentModal';\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentRosterTable from \"../Components/StudentRosterTable\";\nimport { getStuRoster } from \"../actions\"\nimport \"../instructor.css\";\n\nexport default function InsStudentRoster() {\n    const dispatch = useDispatch();\n    const [showStudentModal, setShowStudentModal] = useState(false);\n    //importing global state\n    const [authObj, isNewUserAdded, stuRoster] = useSelector((gState) => [\n        gState.authObj, \n        gState.isNewUserAdded,\n        gState.stuRoster,\n        //added StuRoster and error///Samir\n    ]);\n   \n    //Use effect for mounting student Roster\n    useEffect(() => {\n        dispatch(getStuRoster(authObj.accessToken));\n    },[]);\n\n    console.log(stuRoster)\n    \n    //using useEffect to track isNewUserAdded changes\n    //and show add student modal if successfully logged in\n    useEffect( () => {\n        if (isNewUserAdded){\n            setShowStudentModal(false);\n        }\n     //if NewUser changes, apply this effect  \n    }, [isNewUserAdded]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background portal-sublanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Student Roster</h1>\n                    <p>\n                        View and manage your Student Roster globally and by course!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\" onClick={() => {setShowStudentModal(true)}}>ADD STUDENTS</Button>\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/instructor\")}>VIEW DASHBOARD</Button>\n                        <AddStudentModal show={showStudentModal} onHide={() => setShowStudentModal(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentRosterTable stuRoster = { stuRoster } />\n        </React.Fragment>\n        \n        \n\n\n    )\n}","import React from 'react';\nimport {Card, Button, Image} from \"react-bootstrap\";\nimport \"../instructor.css\";\nimport $ from \"jquery\";\n\nexport default function StudentCard(props) {\n// const [user, setUser] = useState({\n//     data: data,\n\n// })\n\n//    const randomUser = function() {\n//         $.ajax({\n//             url: 'https://randomuser.me/api/',\n//             dataType: 'json',\n//             success: function(data) {\n//                 console.log(data);\n//             }\n//         });\n//    }\n\n\n    return (\n        <div>\n            <Card style={{ width: '18rem' }}>\n                <div className=\"student-card-content\">\n                    <Image className=\"student-card-image\"src=\"https://randomuser.me/api/portraits/women/89.jpg\" roundedCircle></Image>\n                    <div className=\"list-group-flush\">\n                        <div>Name: {props.firstName}{props.lastName}</div>\n                        <div>Email: {props.email}</div>\n                    </div>\n                    <Card.Body>\n                        <Button className=\"primary-button\" href=\"#\">Edit</Button>\n                        <Button className=\"homepage-button\" variant=\"danger\" href=\"#\">Delete Student</Button>\n                    </Card.Body>\n                </div>\n            </Card>\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react';\nimport {Jumbotron, Button } from \"react-bootstrap\";\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentCard from \"../Components/StudentCard\";\nimport \"../instructor.css\";\n\n\nexport default function InsCourseRoster(props) {\n    const [stuList, setStudent] = useState();\n    const [coursesList, setCourses] = useState(false);\n\n\n    return (\n        < > \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background homepage-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | {props.courseName} Roster</h1>\n                    <p>\n                        Manage your {props.courseName} student roster\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\">ADD STUDENTS</Button>{' '}\n                        <Button className=\"InsBtn Dashboard primary-button\">BACK TO GLOBAL ROSTER</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentCard />\n        </>\n        \n        \n\n\n    )\n}","import React from 'react'\nimport Card from \"react-bootstrap/Card\"\nimport Button from \"react-bootstrap/Button\"\nimport { useDispatch }  from \"react-redux\"\nimport { setCourseId } from \"../actions\"\nimport { Redirect, useHistory } from \"react-router-dom\"\n\nexport default function CourseCard(props) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n\n   const { courses } = props\n   console.log(courses)\n\n\n    const redirectRouter = (path) => {\n        history.push(path)\n    }\n\n\n\n   const viewLessons = (e) => {\n    let course_Id = e.currentTarget.id\n    console.log(e)\n    dispatch(setCourseId(course_Id))\n      \n}\n\n\n   \n    return (\n\n        \n        <div>\n            {courses? (\n\n                    courses.map((course) => (\n                        <Card key={ course.id } style={{ width: '18rem' }}>\n                                <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                                <Card.Body>\n                                <Card.Title>{ course[\"course_name\"] }</Card.Title>\n                                <Card.Text>\n                                {course.subject}\n                                 Some quick example text to build on the card title and make up the bulk of\n                                 the card's content.\n                                </Card.Text>\n                                <Button variant=\"primary\" id={ course.id } onClick={(e) => {viewLessons(e) ; redirectRouter('/instructor/courses/lessons') }  }>View Lessons</Button>\n                            </Card.Body>\n                    </Card>\n                    )     \n        \n                    )):(<p></p>)\n                    \n            }\n            \n        </div>\n    )\n}\n\n                    \n                    \n\n","import React, { useState } from 'react';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap';\nimport \"../App.css\";\n//import addCourseAttempt action\nimport { addCourseAttempt } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddCourseModal(props) {\n  //instantiating dispacther\n  const dispatch = useDispatch();\n\n  //form validation state declaration -- initial form state of validation: false\n  const [validated, setValidated] = useState(false);\n  const [courseData, setCourseData] = useState({\n    course_name: \"\",\n    subject: \"\",\n    user_id: \"\"\n  });\n\n  //importing global state\n  const [isAuthenticatedUser, authObj, error] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n    gState.error\n   \n  ]);\n\n  //event handlers\n  //----------------\n  const handleInputChange = (e) => {\n    //save current state\n    const currState = {...courseData};\n    //retrieve \"name\" attribute values form input changed\n    const {name, value} = e.target;\n    currState[name] = value;\n    //update current State backup\n    setCourseData(currState);\n    // console.log(\"This is what we entered in form\", currState)\n  }\n\n  //handleSubmit function to send student data\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const form = e.currentTarget;\n    //checking validation on Submit event\n    if(form.checkValidity() !== false && isAuthenticatedUser){\n      // console.log(\"Is this student data?\", studentData)\n      //dispatch addCourseAttempt action and pass courseData\n      dispatch(addCourseAttempt(courseData, authObj.accessToken));\n      return <Alert variant=\"success\">Course Added!</Alert>\n    } \n    setValidated(true);\n  \n\n    if(error) {return <Alert variant=\"danger\">{error}</Alert>}\n      \n  }\n\n    return (\n      <Modal\n        {...props} className=\"course-modal\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title className=\"contained-modal-title-vcenter\">\n            Add Course\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated}>\n                <Form.Group className=\"course-name\" >\n                    <Form.Control id=\"signup-first-name\" type=\"text\" placeholder=\"Course Name\" \n                        name=\"course_name\"\n                        value={courseData.course_name}\n                        onChange={handleInputChange}\n                        required />\n                </Form.Group>\n                <Form.Group className=\"exampleForm.ControlSelect1\">\n                  <Form.Label>Select Course Subject</Form.Label>\n                    <Form.Control as=\"select\" \n                    name=\"subject\"\n                    value={courseData.subject} \n                    onChange={handleInputChange} \n                    required>\n                      <option value=\"Mathematics\">Mathematics</option>\n                      <option value=\"Science\">Science</option>\n                      <option value=\"Social Studies\">Social Studies</option>\n                      <option value=\"Language Arts\">Language Arts</option>\n                      <option value=\"Computer Science\">Computer Science</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button className=\"primary-button add-course\" onClick={ handleSubmit } >Add Course</Button>\n            </Form>\n        </Modal.Body>   \n      </Modal>\n    );\n  }\n\n  export default AddCourseModal;","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { \n    getCourses,\n    addCourseAttempt,\n    addCourseSuccess,\n    addCourseFailed\n } from '../actions';\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport CourseCard from '../Components/CourseCard';\nimport AppNavbar from '../Components/AppNavbar';\nimport AddCourseModal from '../Components/AddCourseModal';\n\nexport default function InsCoursePage() {\n    const dispatch = useDispatch();\n    //importing global state\n    const [isAuthenticatedUser, authObj, isNewCourseAdded, courses, error] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.authObj, \n        gState.isNewCourseAdded,\n        gState.courses,\n        gState.error \n    ]);\n\n    const [showCourseModal, setShowCourseModal] = useState(false);\n\n    useEffect(() => {\n        dispatch(getCourses(authObj.accessToken));\n    },[]);\n\n    \n    //using useEffect to track isNewCourseAdded changes\n    //and show add student modal if successfully logged in\n    // useEffect( () => {\n    //     if (isNewCourseAdded){\n    //         setShowCourseModal(false);\n    //     }\n    //  //if NewCourse changes, apply this effect  \n    // }, [isNewCourseAdded]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        history.push(routePath);\n    }\n\n    return (\n        <div>\n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background portal-sublanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Instructor Courses</h1>\n                    <p>\n                        View and manage your Courses and Lessons!\n                    </p>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn primary-button\" onClick={() => {setShowCourseModal(true)}}>ADD COURSE</Button>\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => redirectRouter(\"/instructor\")}>VIEW DASHBOARD</Button>\n                        <AddCourseModal show={showCourseModal} onHide={() => setShowCourseModal(false)} />\n                    </p>\n                </div>\n            </Jumbotron>\n            <CourseCard courses={ courses.data } />\n        </div>\n    )\n}\n\n","import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppNavbar from \"../Components/AppNavbar\";\nimport { parse } from \"query-string\";\nimport { validateResetPassToken } from \"../actions\";\nimport \"../instructor.css\";\n\n\n/**\n * HELPER FUNCTIONS\n */\nfunction parseToken(queryToken) {\n    \n    if(!queryToken || queryToken === \"\" || queryToken === undefined || queryToken === null){\n        //redirection to 404\n        return \"404\";\n    }\n    else if(queryToken && queryToken !== \"\"){\n        const _token = parse(queryToken).token || \"\";\n        //check if token is empty\n        if(_token !== \"\"){\n            //dispatch validation action\n            return _token;\n        }\n        else{\n            //redirect to 404\n            return \"404\";\n        }\n    }\n    else{\n        return \"404\";\n    }\n}\n\n\nexport default function ResetPassword(props) {\n    const dispatch = useDispatch();\n    const [isValidPassResTok, isValidatingPassResTok, resPassUid] = useSelector((gState) => [\n        gState.isValidPassResTok,\n        gState.isValidatingPassResTok,\n        gState.resPassUid\n    ]);\n\n    useEffect(() => {\n        const _token = parseToken(props.location.search);\n        //checking for token\n        switch (_token) {\n            case \"404\":\n                console.log(\"token error\");\n                break;\n        \n            default:\n                // dispatch(validateResetPassToken(\".eyJpZCI6MywiaWF0IjoxNjAyMTI5NzEwLCJleHAiOjE2MDIyMTYxMTB9.ZM6i2yEJPR3w2fvcv6LhVQLOXOWhF9tfhNS06A4RHWE\"));\n                dispatch(validateResetPassToken(_token));\n                break;\n        }\n    }, []);\n    \n    const returnFrag = () => {\n        //conditional rendering\n        if (isValidPassResTok){\n           return (\n                <h1 className=\"\">Reset Password Form</h1>\n           ) \n        }\n        else if(!isValidPassResTok && isValidatingPassResTok){\n            return (\n                <h1 className=\"\">Validating...</h1>\n            ) \n        }\n        else if(!isValidPassResTok && !isValidatingPassResTok){\n            return (\n                <h1 className=\"\">Access Denied.</h1>\n            ) \n        }\n        else {\n            return (\n                <h1 className=\"\">Access Denied.</h1>\n            ) \n        }\n    }\n        \n    return (\n        <React.Fragment> \n            <AppNavbar />\n            { returnFrag() }\n        </React.Fragment>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { useSelector } from \"react-redux\";\nimport {Jumbotron, Button } from \"react-bootstrap\"\nimport AppNavbar from \"../Components/AppNavbar\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../instructor.css\";\n\n\nfunction AdminLandingPage() {\n\n    const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n        gState.isAuthenticatedUser,\n        gState.authObj,\n    ]);\n\n    //useHistory hook to redirect to desired routes\n    const history = useHistory();\n    let routePath = \"\";\n\n    //redirecting function\n    const redirectRouter = (routePath) => {\n        if(isAuthenticatedUser) {\n            switch (authObj.role.toUpperCase()) {\n                case \"ADMIN\":\n                    routePath = \"/admin/view/instructors\";\n                    break;\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n        }\n        history.push(routePath);\n    }\n\n    //redirecting function\n    const redirectRouter2 = (routePath) => {\n        if(isAuthenticatedUser) {\n            switch (authObj.role.toUpperCase()) {\n                case \"ADMIN\":\n                    routePath = \"/admin/view/students\";\n                    break;\n                default:\n                    routePath = \"/\";\n                    break;\n            }\n        }\n        history.push(routePath);\n    }\n\n    return (\n\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background homepage-background\">\n            <div className=\"InsLanding-content homepage-content\">\n                <h1 className=\"\">POD | Admin Portal</h1>\n                <p>\n                    Manage Instructors and Students\n                </p>\n                <p className=\"btngroup\">\n                    <Button className=\"InsBtn AddStu primary-button\" id=\"Ins\" onClick={redirectRouter}>MANAGE INSTRUCTORS</Button>\n                    <Button className=\"InsBtn AddCourses primary-button\" id=\"Stu\" onClick={redirectRouter2}>MANAGE STUDENTS</Button>\n                </p>\n            </div>\n        </Jumbotron>\n        </React.Fragment>\n\n    )\n}\n\nexport default AdminLandingPage","import React, { useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport \"../instructor.css\";\n\nexport default function AdminInstructorTable(props) {\n  const { allInstructors } = props;\n  console.log(allInstructors);\n\n\n  return (\n\n    <div>\n    {allInstructors ? (\n      allInstructors.map((instructor) => (\n        <Table key={instructor.id}>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Date Created</th>\n              <th>Activate</th>\n              <th>Deactivate</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{instructor[\"first_name\"]}</td>\n              <td>{instructor[\"last_name\"]}</td>\n              <td>{instructor[\"email\"]}</td>\n              <td>{instructor[\"createdAt\"]}</td>\n              <td>\n                <Button>Activate</Button>\n              </td>\n              <td>\n                <Button>Deactivate</Button>\n              </td>\n              <td>\n                <Button id={ instructor.id }>Delete</Button>\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      ))\n    ) : (\n      <p></p>\n    )}\n  </div>\n  );\n}","import React, {useState, useEffect} from 'react'\nimport {Jumbotron, Button, Table } from \"react-bootstrap\"\nimport { useHistory } from 'react-router-dom';\nimport AppNavbar from \"../Components/AppNavbar\";\nimport InstructorTable from \"../Components/AdminInstructorTable\";\nimport \"../instructor.css\";\nimport { getAllInstructors } from '../actions'\nimport { useDispatch, useSelector } from 'react-redux'\n\nexport default function AdminInstructorList() {\n    const history = useHistory()\n\n\n    const dispatch = useDispatch()\n  \n    const [allInstructors, error, authObj] = useSelector((gState) => [\n      gState.allInstructors,\n      gState.error,\n      gState.authObj\n    ])\n  \n    useEffect(() => {\n      dispatch(getAllInstructors(authObj.accessToken))\n    }, [])\n  \n    // console.log(allInstructors)\n    console.log(allInstructors.data)\n    \n    \n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Instructor View</h1>\n                    {/* <p className=\"btngroup\">\n                        <Button className=\"InsBtn AddStu primary-button\">ADD STUDENTS</Button>{' '}\n                        <Button className=\"InsBtn Dashboard primary-button\">VIEW DASHBOARD</Button>{' '}\n                    </p> */}\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => {history.push(`/admin`)}}>DASHBOARD</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <InstructorTable allInstructors={allInstructors.data} />\n        </React.Fragment>\n    )\n}","import React, { useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport \"../instructor.css\";\n\nexport default function AdminStudentTable(props) {\n  const { allStudents } = props;\n  console.log(allStudents);\n\n\n  return (\n\n    <div>\n    {allStudents ? (\n      allStudents.map((student) => (\n        <Table key={student.id}>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Email</th>\n              <th>Date Created</th>\n              <th>Activate</th>\n              <th>Deactivate</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{student[\"first_name\"]}</td>\n              <td>{student[\"last_name\"]}</td>\n              <td>{student[\"email\"]}</td>\n              <td>{student[\"createdAt\"]}</td>\n              <td>\n                <Button>Activate</Button>\n              </td>\n              <td>\n                <Button>Deactivate</Button>\n              </td>\n              <td>\n                <Button id={ student.id }>Delete</Button>\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      ))\n    ) : (\n      <p></p>\n    )}\n  </div>\n  );\n}","import React, {useState, useEffect} from 'react'\nimport {Jumbotron, Button, Table } from \"react-bootstrap\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom';\nimport AppNavbar from \"../Components/AppNavbar\";\nimport StudentTable from \"../Components/AdminStudentTable\";\nimport { getAllStudents } from '../actions'\nimport \"../instructor.css\";\n\nexport default function AdminStudentList() {\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n  \n    const [allStudents, error, authObj] = useSelector((gState) => [\n      gState.allStudents,\n      gState.error,\n      gState.authObj\n    ])\n  \n    useEffect(() => {\n      dispatch(getAllStudents(authObj.accessToken))\n    }, [])\n  \n    // console.log(allStudents)\n    // console.log(allStudents.data)\n\n    return (\n        <React.Fragment> \n            <AppNavbar />\n            <Jumbotron className=\"InsLanding-background\">\n                <div className=\"InsLanding-content homepage-content\">\n                    <h1 className=\"\">POD | Student View</h1>\n                    <p className=\"btngroup\">\n                        <Button className=\"InsBtn Dashboard primary-button\" onClick={() => {history.push(`/admin`)}}>DASHBOARD</Button>{' '}\n                    </p>\n                </div>\n            </Jumbotron>\n            <StudentTable allStudents={allStudents.data} />\n        </React.Fragment>\n        \n        \n\n\n    )\n}","import React from 'react'\nimport Card from \"react-bootstrap/Card\"\nimport Button from \"react-bootstrap/Button\"\nimport { useDispatch }  from \"react-redux\"\nimport { setCourseId } from \"../actions\"\nimport { Redirect, useHistory } from \"react-router-dom\"\n\nexport default function StuCourseCard(props) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n\n   const { courses } = props\n   console.log(courses)\n\n\n    const redirectRouter = (path) => {\n        history.push(path)\n    }\n\n\n\n   const viewLessons = (e) => {\n    let course_Id = e.currentTarget.id\n    dispatch(setCourseId(course_Id))\n    console.log(course_Id)\n      \n}\n\n\n   \n    return (\n\n        \n        <div>\n            {courses? (\n\n                    courses.map((course) => (\n                        <Card key={ course.Users_Courses.courseId } style={{ width: '18rem' }}>\n                                <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                                <Card.Body>\n                                <Card.Title>{ course[\"course_name\"] }</Card.Title>\n                                <Card.Text>\n                                {course.subject}\n                                 Some quick example text to build on the card title and make up the bulk of\n                                 the card's content.\n                                </Card.Text>\n                                <Button variant=\"primary\" id={ course.Users_Courses.courseId } onClick={(e) => {viewLessons(e) ; redirectRouter('/student/courses/lessons') }  }>View Lessons</Button>\n                            </Card.Body>\n                    </Card>\n                    )     \n        \n                    )):(<p></p>)\n                    \n            }\n            \n        </div>\n    )\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { getStuCourses } from '../actions';\n\nimport StuCourseCard from '../Components/StuCourseCard';\nimport AppNavbar from '../Components/AppNavbar';\n\n\nexport default function InsCoursePage() {\n    const dispatch = useDispatch();\n\n    const [courses, authObj] = useSelector((gState) => [\n        gState.courses,\n        gState.authObj\n\n      ]);\n\n    useEffect(() => {\n        dispatch(getStuCourses(authObj.accessToken));\n    },[authObj.accessToken]);\n\n    \n\n    console.log(authObj.accessToken)\n    console.log(courses)\n\n    return (\n        <div>\n            <AppNavbar />\n            <StuCourseCard courses={ courses } />\n        </div>\n    )\n}\n\n","import React from 'react'\nimport ReactPlayer from 'react-player/youtube'\nimport { useDispatch, useSelector } from 'react-redux'\nimport \"../App.css\"\n\n\nexport default function Player() {\n    const [url] = useSelector((gState) =>[\n      gState.url\n    ])\n\n\n    return (\n\n    <div className='player-wrapper'>\n        <ReactPlayer\n          className='react-player'\n          url={url}\n          width='100%'\n          height='100%'\n          controls= {true}\n        />\n    </div>\n    )\n}\n","import React from 'react'\nimport Card from \"react-bootstrap/Card\"\nimport {useEffect, useState} from \"react\"\nimport Button from \"react-bootstrap/Button\"\nimport { Redirect, useHistory } from \"react-router-dom\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUrl } from '../actions'\nimport Player from \"./Player\"\n\nexport default function LessonCard(props) {\n    const { lessons } = props\n    \n    const [authObj, url] = useSelector((gState) => [\n        gState.authObj,\n        gState.url\n      ]);   \n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    \n\n\n\n   const urlGetter = (e) => {\n    console.log(e.currentTarget.getAttribute(\"url\"))\n    let url = e.currentTarget.getAttribute(\"url\")\n    dispatch(getUrl(url))\n      \n}\n\n    const videoRouter = (path) => {\n        \n        history.push(path)\n    }\n    \n\n\n    return (\n        <div>\n            {lessons? (\n                    lessons.map((lesson) => (\n                        <Card key={ lesson.id } style={{ width: '18rem' }}>\n                            <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                            <Card.Body>\n                                <Card.Title>{lesson.name}</Card.Title>\n                                <Card.Text>\n                                 Some quick example text to build on the card title and make up the bulk of\n                                 the card's content.\n                                </Card.Text>\n                                <Button variant=\"primary\" url={ lesson.url } onClick={(e) => {urlGetter(e) ; videoRouter(\"/student/courses/lessons\")} }>Watch Video</Button>{\" \"}\n                                 {authObj.role === \"INSTRUCTOR\" ? (\n                                     <Button variant=\"danger\" id=\"delButton\" >Delete Lesson</Button>\n                                 ):(<p></p>)}\n                                \n                            </Card.Body>\n                    </Card>\n                    )\n        \n                    )):(<p>NO LESSONS UPLOADED BY INSTRUCTOR</p>)\n                    \n            }\n\n\n\n\n        </div>\n    )\n\n}\n","import React from 'react'\nimport LessonCard from \"../Components/LessonCard\"\nimport AppNavbar from '../Components/AppNavbar';\nimport { useEffect } from \"react\";\nimport { getStuLessons } from '../actions';\nimport Player from \"../Components/Player\"\nimport \"../App.css\"\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function StuLessonPage() {\n    const dispatch = useDispatch()\n    const [courseId, lessons, authObj, url] = useSelector((gState) => [\n        gState.courseId,\n        gState.lessons,\n        gState.authObj,\n        gState.url\n\n      ]);\n    console.log(courseId)\n    \n    useEffect(() => {\n        dispatch(getStuLessons(authObj.accessToken, courseId));\n    },[courseId , authObj.accessToken]);\n    \n  \n    return (\n        <div>\n            <AppNavbar />\n            {\n                url ? (\n                    <div className=\"container video\">\n                        <div><LessonCard lessons={lessons.data} /> </div><div><Player/></div>\n                    </div> \n                ) : (\n                    <div className=\"noVideo\"><LessonCard lessons={lessons.data} /></div>\n                )\n            }\n            \n\n        </div>\n    )\n}\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n//Protected Route component, prevents not-logged users to \n//visit sensitive app sections\n//from react-router documentation:\nconst ProtectedRoute = ({ component: Component, path, auth, ...rest }) => {\n    return (\n        //returns a Route component from react-router\n        //which renders a component specified in the render prop\n        <Route { ...rest } render={\n            // props => <Component { ...rest } { ...props } /> \n            props => {\n                if(Object.keys(auth).length !== 0) {\n                    //user is logged in\n                    //need to verify role\n                    switch (path) {\n                        case \"/instructor\":\n                        case \"/instructor/courses\":\n                        case \"/instructor/courses/lessons\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/instructor/student-roster\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/instructor/courses/:id/roster\":\n                            if(auth.role.toUpperCase() === \"INSTRUCTOR\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/admin\":\n                        case \"/admin/view/students\":\n                            if(auth.role.toUpperCase() === \"ADMIN\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                        case \"/admin/view/instructors\":\n                            if(auth.role.toUpperCase() === \"ADMIN\"){\n                                return <Component {...rest} {...props} />\n                            }\n                            break;\n                    \n                        default:\n                            break;\n                    }\n                }\n                else{\n                    //redirect to /unauthorized\n                    return <Redirect to={\n                        {\n                            pathname: \"/unauthorized\",\n                            state: {\n                                from: props.location\n                            }\n                        }\n                    }\n                    />\n                }\n            }\n        } />\n    )\n}\n\nexport default ProtectedRoute;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo403 from \"../img/403.png\";\nimport \"../App.css\";\n\nconst Unauthorized = () => {\n  return (\n    <div className='container'>\n      <div className=\"four0three\">\n        <img src={logo403} alt=\"403 Forbidden Access\" />\n      </div>\n      <div className=\"unauth-message\">\n        {/* <h1>403 - You Shall Not Pass</h1> */}\n        <p>Uh oh, it looks like your missing something!<br />We have not been able to verify your credentials. Please be sure you are logged in.</p>\n        <p><Link to='/'>Back to Home</Link></p>\n      </div>\n    </div>\n  )\n}\n\nexport default Unauthorized;","import React from 'react'\nimport LessonCard from \"../Components/LessonCard\"\nimport AppNavbar from '../Components/AppNavbar';\nimport { useEffect } from \"react\";\nimport { getLessons } from '../actions';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function InsLessonPage() {\n    const dispatch = useDispatch()\n    const [courseId, lessons, authObj] = useSelector((gState) => [\n        gState.courseId,\n        gState.lessons,\n        gState.authObj\n\n      ]);\n\n    useEffect(() => {\n        dispatch(getLessons(authObj.accessToken, courseId));\n    },[courseId , authObj.accessToken]);\n    \n  \n    return (\n        <div>\n            <AppNavbar />\n            <LessonCard lessons={lessons.data} />\n        </div>\n    )\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n//Importing pages\nimport Home from \"./pages/Home\";\nimport PortalLanding from \"./pages/PortalLanding\";\nimport InsStudentRoster from \"./pages/InsStudentRoster\";\nimport InsCourseRoster from \"./pages/InsCourseRoster\";\nimport InsCourses from \"./pages/InsCoursePage\";\nimport ResetPassword from \"./pages/ResetPassword\";\nimport AdminLandingPage from \"./pages/AdminLandingPage\"\nimport AdminInstructorView from \"./pages/AdminInstructorView\"\nimport AdminStudentView from \"./pages/AdminStudentView\"\nimport StuCoursePage from \"./pages/StuCoursePage\"\nimport StuLessonPage from \"./pages/StuLessonPage\"\n//Protected Route component\nimport ProtectedRoute from \"./Components/ProtectedRoute\";\nimport Unauthorized from \"./Components/Unauthorized\";\n//Importing CSS\nimport \"./App.css\";\nimport InsLessonPage from \"./pages/InsLessonPage\";\n\nfunction App() {\n  //importing from global state\n  const [isAuthenticatedUser, authObj] = useSelector((gState) => [\n    gState.isAuthenticatedUser,\n    gState.authObj,\n  ]);\n\n  //verify __session validity if user is authenticated\n  const isSessionValid = () => {\n    if (isAuthenticatedUser) return authObj;\n    return false;\n  }\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/student/courses\" component={StuCoursePage} />\n        <Route exact path=\"/student\" auth={isSessionValid()} component={PortalLanding} />\n        <Route exact path=\"/student/courses/lessons\" component={StuLessonPage} />\n        <ProtectedRoute exact path=\"/instructor/courses\"auth={isSessionValid()} component={InsCourses} />\n        <ProtectedRoute exact path=\"/instructor/courses/lessons\" auth={isSessionValid()} component={InsLessonPage} />\n        <ProtectedRoute exact path=\"/instructor\" auth={isSessionValid()} component={PortalLanding} />\n        <ProtectedRoute exact path=\"/instructor/student-roster\" auth={isSessionValid()} component={InsStudentRoster} />\n        <ProtectedRoute exact path=\"/instructor/courses/:id/roster\" auth={isSessionValid()} component={InsCourseRoster} />\n        <ProtectedRoute exact path=\"/admin\" auth={isSessionValid()} component={AdminLandingPage} />\n        <ProtectedRoute exact path=\"/admin/view/instructors\" auth={isSessionValid()} component={AdminInstructorView} />\n        <ProtectedRoute exact path=\"/admin/view/students\" auth={isSessionValid()} component={AdminStudentView} />\n        {/* <Route exact path=\"/instructor\" component={PortalLanding} /> */}\n        <Route exact path=\"/unauthorized\" component={Unauthorized} />\n        <Route exact path=\"/user/auth/set-password\" component={ResetPassword} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, \n  LOGOUT_REQUEST, LOGOUT_SUCCESS,LOGOUT_FAILURE,\n  ADD_STUDENT_REQUEST, ADD_STUDENT_SUCCESS, ADD_STUDENT_FAILURE,\n  ADD_COURSE_REQUEST, ADD_COURSE_SUCCESS, ADD_COURSE_FAILURE,\n  GET_COURSES_REQUEST, GET_COURSES_SUCCESS, GET_COURSES_FAILURE,\n  GET_LESSONS_REQUEST, GET_LESSONS_SUCCESS, GET_LESSONS_FAILURE,\n  GET_ROSTER_REQUEST, GET_ROSTER_SUCCESS, GET_ROSTER_FAILURE,\n  SET_COURSE_IDREQ , SET_COURSE_IDSUCCESS , SET_COURSE_IDFAIL,\n  GET_ALL_INSTRUCTORS_REQUEST, GET_ALL_INSTRUCTORS_SUCCESS, GET_ALL_INSTRUCTORS_FAILURE,\n  PASSRESTOK_VALIDATION_REQUEST, PASSRESTOK_VALIDATION_SUCCESS, PASSRESTOK_VALIDATION_FAILURE,\n  GET_ALL_STUDENTS_REQUEST, GET_ALL_STUDENTS_SUCCESS, GET_ALL_STUDENTS_FAILURE, GET_URL_REQUEST, GET_URL_SUCCESS, GET_URL_FAILURE\n} from \"./constants\";\nimport { validateSession, getSessionAuthObj } from \"./utils/sessions\";\n\nexport const initialState = {\n  isFetchingAuth: false,\n  isAuthenticatedUser: validateSession(),\n  isLoggingOut: false,\n  isLoggedOutSuccess: false,\n  isValidatingPassResTok: false,\n  isValidPassResTok: false,\n  authObj: getSessionAuthObj(),\n  isNewCourseAdded: false,\n  courseObj: {},\n  courses: [],\n  courseId: \"\",\n  allInstructors: [],\n  allStudents: [],\n  lessons: [],\n  isAddingNewUser: false,\n  isNewUserAdded: false,\n  stuObj: {},\n  stuRoster: [],\n  resPassUid: {},\n  url: \"\",\n  error: \"\"\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser \n      };\n    case LOGIN_SUCCESS:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser, \n        authObj: action.payload,\n        error: \"\"\n      };\n    case LOGIN_FAILURE:\n      return { \n        ...state, \n        isFetchingAuth: action.isFetchingAuth, \n        isAuthenticatedUser: action.isAuthenticatedUser, \n        authObj: {},\n        error: action.payload\n      };\n\n    case ADD_COURSE_REQUEST:\n        return {...state, isNewCourseAdded: false} \n    case ADD_COURSE_SUCCESS:\n        return { \n          ...state, \n          isNewCourseAdded: true,\n          courseObj: action.payload,\n          error: \"\"\n        };\n    case ADD_COURSE_FAILURE:\n      return { \n        ...state, \n        isNewCourseAdded: false,\n        courseObj: {},\n        error: action.payload\n      };\n\n    case GET_COURSES_REQUEST:\n        return {...state, courses: [], error: null}\n    case GET_COURSES_SUCCESS:\n        return {...state, courses: action.payload, error: null}\n    case GET_COURSES_FAILURE:\n        return {...state, error: action.payload}\n\n    case GET_LESSONS_REQUEST:\n          return {...state, lessons: [], error: null}\n    case GET_LESSONS_SUCCESS:\n          return {...state, lessons: action.payload, error: null}\n    case GET_LESSONS_FAILURE:\n          return {...state, error: action.payload}\n    \n\n    case SET_COURSE_IDREQ:\n          return {...state, courseId: \"\", error: null}\n    case SET_COURSE_IDSUCCESS:\n          return {...state, courseId: action.payload, error: null}\n    case SET_COURSE_IDFAIL:\n          return {...state, error: action.payload}\n\n    case GET_ALL_INSTRUCTORS_REQUEST:\n          return {...state, allInstructors: [], error: null}\n    case GET_ALL_INSTRUCTORS_SUCCESS:\n          return {...state, allInstructors: action.payload, error: null}\n    case GET_ALL_INSTRUCTORS_FAILURE:\n          return {...state, error: action.payload}\n\n    case GET_ALL_STUDENTS_REQUEST:\n          return {...state, allStudents: [], error: null}\n    case GET_ALL_STUDENTS_SUCCESS:\n          return {...state, allStudents: action.payload, error: null}\n    case GET_ALL_STUDENTS_FAILURE:\n          return {...state, error: action.payload}\n\n    case GET_ROSTER_REQUEST:\n            return {...state, stuRoster: [], error: null}\n    case GET_ROSTER_SUCCESS:\n            return {...state, stuRoster: action.payload, error: null}\n    case GET_ROSTER_FAILURE:\n            return {...state, error: action.payload}\n\n    case LOGOUT_REQUEST:\n      return { \n        ...state, \n        isLoggingOut: true\n      };\n    case LOGOUT_SUCCESS:\n      return { \n        ...state, \n        isLoggingOut: false,\n        isLoggedOutSuccess: true,\n        isAuthenticatedUser: false,\n        authObj: {},\n        courses: [],\n        error: \"\",\n      };\n    case LOGOUT_FAILURE:\n      //force state reset\n      return {\n        ...state, \n        isLoggingOut: false,\n        isLoggedOutSuccess: false,\n        isAuthenticatedUser: false,\n        authObj: {},\n        courses: [],\n        error: action.payload,\n      };\n\n    case ADD_STUDENT_REQUEST:\n      return {\n        ...state,\n        isNewUserAdded: false \n      }\n    case ADD_STUDENT_SUCCESS:\n      return { \n        ...state, \n        isNewUserAdded: true,\n        stuObj: action.payload,\n        error: \"\"\n      };\n    case ADD_STUDENT_FAILURE:\n      return { \n        ...state, \n        isNewUserAdded: false,\n        stuObj: {},\n        error: action.payload\n      };\n\n    //password reset\n    case PASSRESTOK_VALIDATION_REQUEST:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok \n      }\n\n    //password reset\n    case PASSRESTOK_VALIDATION_SUCCESS:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok, \n        resPassUid: action.payload, \n        error: \"\" \n      }\n\n    //password reset\n    case PASSRESTOK_VALIDATION_FAILURE:\n      return { \n        ...state, \n        isValidatingPassResTok: action.isValidatingPassResTok, \n        isValidPassResTok: action.isValidPassResTok, \n        error: action.payload, \n        resPassUid: \"\" \n      }\n\n    case GET_URL_REQUEST:\n       return {...state, url: '', error:null}\n    case GET_URL_SUCCESS:\n       return {...state, url: action.payload, error:null}\n    case GET_URL_FAILURE:\n       return {...state, error: action.payload}   \n    default:\n      return state;\n  }\n};","import { createStore, applyMiddleware, compose } from 'redux';\nimport reducer, { initialState } from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n  reducer,\n  initialState,\n  compose(applyMiddleware(thunk), composeWithDevTools())\n);\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  \n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/403.582b9608.png\";"],"sourceRoot":""}